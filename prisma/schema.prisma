// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Project {
    id        String   @id @default(uuid())
    name      String
    createdAt DateTime @default(now())
    status    String   @default("active") // active, archived, etc.
    
    // Relations
    interviewLinks    InterviewLink[]
    questionPairs     QuestionPair[]
    stepRecords       StepRecord[]
    csvFiles          CSVFile[]

    @@index([name])
}

// New model to track CSV file uploads
model CSVFile {
    id          String   @id @default(uuid())
    filename    String
    uploadedAt  DateTime @default(now())
    rowCount    Int
    isActive    Boolean  @default(true)  // The currently active CSV for the project
    
    // Relations
    project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId   String
    questionPairs QuestionPair[]

    @@index([projectId])
}

model InterviewLink {
    id            String   @id @default(uuid())
    name          String
    interviewName String   // Name of the person taking the interview
    url           String   @unique
    expiryDate    DateTime?
    rowQuota      Int?
    status        String   @default("unused") // unused, in-progress, completed
    createdAt     DateTime @default(now())
    
    // Relations
    project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId     String
    sessions      InterviewSession[]

    @@index([projectId])
}

model InterviewSession {
    id          String    @id @default(uuid())
    startedAt   DateTime  @default(now())
    completedAt DateTime?
    status      String    @default("in-progress") // in-progress, completed, abandoned
    processed   Boolean   @default(false) // Whether analysis has been processed
    
    // Relations
    interviewLink     InterviewLink @relation(fields: [interviewLinkId], references: [id], onDelete: Cascade)
    interviewLinkId   String
    analysisArtifacts AnalysisArtifact[]
    stepRecords       StepRecord[]
    sessionSummary    SessionSummary?

    @@index([interviewLinkId])
    @@index([processed])
}

// Updated to connect to CSVFile
model QuestionPair {
    id           String  @id @default(uuid())
    questionId   String  // Original ID from the CSV
    questionText String
    answerA      String
    answerB      String
    metadata     Json?
    order        Int     // To preserve the original order from the CSV
    
    // Relations
    project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId    String
    csvFile      CSVFile @relation(fields: [csvFileId], references: [id], onDelete: Cascade)
    csvFileId    String
    stepRecords  StepRecord[]
    analysisArtifacts AnalysisArtifact[]

    @@index([projectId])
    @@index([questionId])
    @@index([order])
    @@index([csvFileId])
}

// Updated to only contain session-specific data
model StepRecord {
    id             String  @id @default(uuid())
    preferredAnswer String? // "A", "B", or null if not selected
    transcript     Json?   // Stores the conversation transcript
    
    // Relations
    project        Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId      String
    
    // Link to the question pair from the CSV
    questionPair   QuestionPair @relation(fields: [questionPairId], references: [id])
    questionPairId String
    
    // Link to the interview session
    session        InterviewSession @relation(fields: [sessionId], references: [id])
    sessionId      String

    @@index([projectId])
    @@index([sessionId])
    @@index([questionPairId])
}

model AnalysisArtifact {
    id                 String @id @default(uuid())
    winnerFlag         String? // "A", "B", or null
    severityScore      Float? // Changed to Float for 0-1 scale
    rationaleDigest    String? @db.Text
    knowledgeGaps      Json?
    promptSuggestions  Json?
    
    // Relations
    session            InterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    sessionId          String
    
    // Link to the question this analysis is for
    questionPair       QuestionPair @relation(fields: [questionPairId], references: [id])
    questionPairId     String

    @@index([sessionId])
    @@index([questionPairId])
}

// New model for session-level summary
model SessionSummary {
    id                 String @id @default(uuid())
    aggregatedInsights Json?
    overallFeedback    String? @db.Text
    
    // Relations
    session            InterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    sessionId          String @unique

    @@index([sessionId])
}
